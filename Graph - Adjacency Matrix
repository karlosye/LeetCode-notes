// adjacency matrix:
class Main {
    public static void main(String[] args) {
        
        Graph graph = new Graph(5);
        
        graph.addNode(new Node('A'));
        graph.addNode(new Node('B'));
        graph.addNode(new Node('C'));
        graph.addNode(new Node('D'));
        graph.addNode(new Node('E'));
        
        // build edges:
        graph.addEdge(0,1);
        graph.addEdge(1,2);
        graph.addEdge(2,3);
        graph.addEdge(2,4);
        graph.addEdge(2,5);
        graph.addEdge(4,2);
        graph.addEdge(4,0);
        
        graph.print();
    }
}

class Node {
    char data;
    
    public Node(char data) {
        this.data = data;
    }
}

class Graph {
    
    int[][] matrix;
    ArrayList<Node> nodes;
    
    public Graph(int size) {
        
        // by default, Java init an integer array with zero
        this.matrix = new int[size][size];
        this.nodes = new ArrayList<>();
    }
    
    // define a addNode method:
    public void addNode(Node node) {
        this.nodes.add(node);   
    }
    
    // define a addEdge method:
    public void addEdge(int src, int dst) {
        this.matrix[src][dst] = 1; 
    }
    
    // define a checkEdge method:
    public boolean checkEdge(int src, int dst) {
        return this.matrix[src][dst] == 1 ? true : false;
    }
}

// Adjacency List:
class Main {
    public static void main(String[] args) {
        
        // init a new graph:
        Graph graph = new Graph();
        
        graph.addNode(new Node('A'));
        graph.addNode(new Node('B'));
        graph.addNode(new Node('C'));
        graph.addNode(new Node('D'));
        graph.addNode(new Node('E'));
        
        graph.addEdge(0,1);
        graph.addEdge(1,2);
        graph.addEdge(1,4);
        graph.addEdge(2,3);
        graph.addEdge(2,4);
        graph.addEdge(4,0);
        graph.addEdge(4,2);
        
        graph.print();
    }
}

class Graph {
    
    ArrayList<LinkedList<Node>> aList;
    
    public Graph() {
        this.aList = new ArrayList<>();        
    }
    
    // define a addNode method:
    public void addNode(Node node) {
        
        LinkedList<Node> currLinkedList = new LinkedList<>();
        currLinkedList.add(node);
        this.aList.add(currLinkedList);
    }
    
    // define a addEdge method:
    public void addEdge(int src, int dst) {
        
        LinkedList<Node> currentList = aList.get(src);
        Node dstNode = aList.get(dst).get(0);
        currentList.add(dstNode);
    }
    
    // define a checkEdge method:
    public boolean checkEdge(int src, int dst) {
        
        // get the src linkedList:
        LinkedList<Node> currList = aList.get(src);
        // get the dst node:
        Node dstNode = aList.get(dst).get(0);
        
        // loop through the currList:
        for (Node node:currList) {
            // check memory location
            if (node == dstNode) {
                return true;
            }
        }
        return false;
    }
}

class Node {
    char data;
    
    public Node(char data) {
        this.data = data;
    }
}
