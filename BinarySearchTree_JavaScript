```
class Node {

    constructor(val) {
        this.value = val;
        this.left = null;
        this.right = null;
    }
}

class BST {

    constructor(val) {

        this.headNode = new Node(val);
        this.count = 1;
    }

    //size method:
    size() {
        return this.count;
    }

    //insert method:
    insert(val) {
    
        this.count++;
        let newNode = new Node(val);

        let searchTree = function(Node) {

            if (val < Node.value) {

                if (!Node.left) {

                    Node.left = newNode;
                    
                } else {

                    return searchTree(Node.left);
                }
                
            } else if (val > Node.value) {

                if (!Node.right) {

                    Node.right = newNode;
                    
                } else {

                    return searchTree(Node.right);
                }
                
            } else if (val == Node.value) {

                return false;
            }
        }

        return searchTree(this.headNode);
    }

    //min method:
    min() {

        let currentNode = this.headNode;

        while(currentNode.left) {

            currentNode = currentNode.left;
        }

        return currentNode.value;
    }    

    //max method:
    max() {

        let goRight = function(node) {

            if (!node.right) {

                return node.value;
                
            } else {

                return goRight(node.right);
            }
        }

        return goRight(this.headNode);
        
        // let currentNode = this.headNode;

        // while(currentNode.right) {

        //     currentNode = currentNode.right;
        // }
        // return currentNode.value;
    }

    //contains() method: return true if exist 
    contains(val) {

        let searchValue = function(node) {

            if (val == node.value) {

                return true;
                
            } else if (val < node.value) {

                if (!node.left) {

                    return false;
                    
                } else {

                    return searchValue(node.left);
                }
                
            } else if (val > node.value) {

                if (!node.right) {

                    return false;
                    
                } else {

                    return searchValue(node.right);
                }
            }
        }

        return searchValue(this.headNode);
    }

    //Depth first search (DFS): search the tree branch by branch

    //in-order DFS: left, root, right
    dfsInOrder() {

        let outputArray = [];

        let traverse = function(node) {
        
            if (node.left) { traverse(node.left) }
            
            outputArray.push(node.value);

            if (node.right) { traverse(node.right) }
        }

        traverse(this.headNode);

        return outputArray;
    }

    //pre-order DFS: root, left, right
    dfsPreOrder() {

        let outputArray = [];

        let traverse = (node) => {

            outputArray.push(node.value);

            if (node.left) { traverse(node.left) }
            if (node.right) { traverse(node.right) }
        }

        traverse(this.headNode);
        
        return outputArray;
    }

    //post-order DFS: left, right, root
    dfsPostOrder() {

        let outputArray = [];

        let traverse = (node) => {

            if (node.left) { traverse(node.left) }
            if (node.right) { traverse(node.right) }
            
            outputArray.push(node.value);
        }

        traverse(this.headNode);

        return outputArray;
    }

    //BFS: breadth first search: search by level:
    BFS() {

        let result = [];
        let queue = [];

        queue.push(this.headNode);

        while(queue.length) {

            let currentNode = queue.shift();

            result.push(currentNode.value);

            if (currentNode.left) { queue.push(currentNode.left) }

            if (currentNode.right) { queue.push(currentNode.right) }
        }


        return result;
    }
}


let BST1 = new BST(15);
BST1.insert(3);
BST1.insert(2);
BST1.insert(12);
BST1.insert(36);
BST1.insert(28);
BST1.insert(39);
```
